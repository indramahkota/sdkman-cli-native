---
description: Project Overview
globs: *.*
---
# Project Overview

## Stack
- Rust
- Anthropic
- JReleaser

## Project layout
- Multiple binaries produced by this project, for example, `current`, `default`, `help` etc.
- Each binary is built in its own module under `src/bin`
- Common helper functions live in `lib.rs`
- Native binaries are built for multiple target architectures on GitHub
- After packaging, they are released to GitHub Releases by JReleaser

## Target Architectures

We produce binaries for 
* aarch64-unknown-linux-gnu
* x86_64-unknown-linux-gnu
* i686-unknown-linux-gnu
* aarch64-apple-darwin
* x86_64-apple-darwin
* x86_64-pc-windows-msvc

## Packaging and context

- The binaries produced are archived in a zip file inside a `libexec` folder.
- During installation and selfupdate of SDKMAN!, the contents of the binary are extracted into the `~/.sdkman/libexec` directory

```
$HOME
├── .sdkman
│   ├── libexec
│   │   ├── current
│   │   ├── default
│   │   ├── help
│   │   ├── home
│   │   ├── uninstall
│   │   └── version
```
- These binaries supercede the legacy SDKMAN bash commands and will be given precedence by `sdk` when issuing commands such as `sdk current`, `sdk default`, `sdk help` etc.
- If the issued command is not preset, then we will fallback on the legacy bash command.
- This allows us to incrementally add new commands while strangling the legacy bash functions.

## Directory Structure
```
├── .github
│   ├── dependabot.yml
│   └── workflows
│       ├── pull_request.yml
│       └── release.yml
├── bin
├── Cargo.lock
├── Cargo.toml
├── install.sh
├── jreleaser.yml
├── LICENSE
├── README.md
├── src
│   ├── bin
│   │   ├── current
│   │   ├── default
│   │   ├── help
│   │   ├── home
│   │   ├── uninstall
│   │   └── version
│   └── lib.rs
├── target
└── tests
```

## Key Principles
- Clean code practices
- Follow the same approach as was followed in the rest of the project
- Follow the official Rust style guide: https://doc.rust-lang.org/nightly/style-guide/
- Never use `unwrap` but instead deal with errors appropriately
- Use the `Result` type for recoverable errors and `panic!` for unrecoverable errors.
- Apply `cargo fmt` to enforce the appropriate stye _before every Git commit_
- Ensure that compilation passes and that tests pass _before every Git commit_

## Git Commit Style
- Use specific, concise imperative statements:
  - "Add user authentication module"
  - "Fix login validation bug" 
  - "Update API documentation"
  - "Refactor data processing pipeline"
  - "Remove deprecated methods"
- No lengthy descriptions in commit body
- Make small, incremental commits after each change
- Use conventional commit prefixes (feat:, fix:, chore:, etc.)
- Keep messages concise and reference issues
